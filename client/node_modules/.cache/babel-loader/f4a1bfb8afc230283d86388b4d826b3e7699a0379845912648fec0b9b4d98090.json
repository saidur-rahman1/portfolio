{"ast":null,"code":"'use strict';\n\n/**\n * Dependencies\n */\nconst EmailAddress = require('./email-address');\nconst Personalization = require('./personalization');\nconst toCamelCase = require('../helpers/to-camel-case');\nconst toSnakeCase = require('../helpers/to-snake-case');\nconst deepClone = require('../helpers/deep-clone');\nconst arrayToJSON = require('../helpers/array-to-json');\nconst {\n  DYNAMIC_TEMPLATE_CHAR_WARNING\n} = require('../constants');\nconst {\n  validateMailSettings,\n  validateTrackingSettings\n} = require('../helpers/validate-settings');\n\n/**\n * Mail class\n */\nclass Mail {\n  /**\n   * Constructor\n   */\n  constructor(data) {\n    //Initialize array and object properties\n    this.isDynamic = false;\n    this.hideWarnings = false;\n    this.personalizations = [];\n    this.attachments = [];\n    this.content = [];\n    this.categories = [];\n    this.headers = {};\n    this.sections = {};\n    this.customArgs = {};\n    this.trackingSettings = {};\n    this.mailSettings = {};\n    this.asm = {};\n\n    //Helper properties\n    this.substitutions = null;\n    this.substitutionWrappers = null;\n    this.dynamicTemplateData = null;\n\n    //Process data if given\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * Build from data\n   */\n  fromData(data) {\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n\n    //Extract properties from data\n    const {\n      to,\n      from,\n      replyTo,\n      cc,\n      bcc,\n      sendAt,\n      subject,\n      text,\n      html,\n      content,\n      templateId,\n      personalizations,\n      attachments,\n      ipPoolName,\n      batchId,\n      sections,\n      headers,\n      categories,\n      category,\n      customArgs,\n      asm,\n      mailSettings,\n      trackingSettings,\n      substitutions,\n      substitutionWrappers,\n      dynamicTemplateData,\n      isMultiple,\n      hideWarnings,\n      replyToList\n    } = data;\n\n    //Set data\n    this.setFrom(from);\n    this.setReplyTo(replyTo);\n    this.setSubject(subject);\n    this.setSendAt(sendAt);\n    this.setTemplateId(templateId);\n    this.setBatchId(batchId);\n    this.setIpPoolName(ipPoolName);\n    this.setAttachments(attachments);\n    this.setContent(content);\n    this.setSections(sections);\n    this.setHeaders(headers);\n    this.setCategories(category);\n    this.setCategories(categories);\n    this.setCustomArgs(customArgs);\n    this.setAsm(asm);\n    this.setMailSettings(mailSettings);\n    this.setTrackingSettings(trackingSettings);\n    this.setHideWarnings(hideWarnings);\n    this.setReplyToList(replyToList);\n    if (this.isDynamic) {\n      this.setDynamicTemplateData(dynamicTemplateData);\n    } else {\n      this.setSubstitutions(substitutions);\n      this.setSubstitutionWrappers(substitutionWrappers);\n    }\n\n    //Add contents from text/html properties\n    this.addTextContent(text);\n    this.addHtmlContent(html);\n\n    //Using \"to\" property for personalizations\n    if (personalizations) {\n      this.setPersonalizations(personalizations);\n    } else if (isMultiple && Array.isArray(to)) {\n      //Multiple individual emails\n      to.forEach(to => this.addTo(to, cc, bcc));\n    } else {\n      //Single email (possibly with multiple recipients in the to field)\n      this.addTo(to, cc, bcc);\n    }\n  }\n\n  /**\n   * Set from email\n   */\n  setFrom(from) {\n    if (this._checkProperty('from', from, [this._checkUndefined])) {\n      if (typeof from !== 'string' && typeof from.email !== 'string') {\n        throw new Error('String or address object expected for `from`');\n      }\n      this.from = EmailAddress.create(from);\n    }\n  }\n\n  /**\n   * Set reply to\n   */\n  setReplyTo(replyTo) {\n    if (this._checkProperty('replyTo', replyTo, [this._checkUndefined])) {\n      if (typeof replyTo !== 'string' && typeof replyTo.email !== 'string') {\n        throw new Error('String or address object expected for `replyTo`');\n      }\n      this.replyTo = EmailAddress.create(replyTo);\n    }\n  }\n\n  /**\n   * Set subject\n   */\n  setSubject(subject) {\n    this._setProperty('subject', subject, 'string');\n  }\n\n  /**\n   * Set send at\n   */\n  setSendAt(sendAt) {\n    if (this._checkProperty('sendAt', sendAt, [this._checkUndefined, this._createCheckThatThrows(Number.isInteger, 'Integer expected for `sendAt`')])) {\n      this.sendAt = sendAt;\n    }\n  }\n\n  /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */\n  setTemplateId(templateId) {\n    if (this._setProperty('templateId', templateId, 'string')) {\n      if (templateId.indexOf('d-') === 0) {\n        this.isDynamic = true;\n      }\n    }\n  }\n\n  /**\n   * Set batch ID\n   */\n  setBatchId(batchId) {\n    this._setProperty('batchId', batchId, 'string');\n  }\n\n  /**\n   * Set IP pool name\n   */\n  setIpPoolName(ipPoolName) {\n    this._setProperty('ipPoolName', ipPoolName, 'string');\n  }\n\n  /**\n   * Set ASM\n   */\n  setAsm(asm) {\n    if (this._checkProperty('asm', asm, [this._checkUndefined, this._createTypeCheck('object')])) {\n      if (typeof asm.groupId !== 'number') {\n        throw new Error('Expected `asm` to include an integer in its `groupId` field');\n      }\n      if (asm.groupsToDisplay && (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every(group => typeof group === 'number'))) {\n        throw new Error('Array of integers expected for `asm.groupsToDisplay`');\n      }\n      this.asm = asm;\n    }\n  }\n\n  /**\n   * Set personalizations\n   */\n  setPersonalizations(personalizations) {\n    if (!this._doArrayCheck('personalizations', personalizations)) {\n      return;\n    }\n    if (!personalizations.every(personalization => typeof personalization === 'object')) {\n      throw new Error('Array of objects expected for `personalizations`');\n    }\n\n    //Clear and use add helper to add one by one\n    this.personalizations = [];\n    personalizations.forEach(personalization => this.addPersonalization(personalization));\n  }\n\n  /**\n   * Add personalization\n   */\n  addPersonalization(personalization) {\n    //We should either send substitutions or dynamicTemplateData\n    //depending on the templateId\n    if (this.isDynamic && personalization.substitutions) {\n      delete personalization.substitutions;\n    } else if (!this.isDynamic && personalization.dynamicTemplateData) {\n      delete personalization.dynamicTemplateData;\n    }\n\n    //Convert to class if needed\n    if (!(personalization instanceof Personalization)) {\n      personalization = new Personalization(personalization);\n    }\n\n    //If this is dynamic, set dynamicTemplateData, or set substitutions\n    if (this.isDynamic) {\n      this.applyDynamicTemplateData(personalization);\n    } else {\n      this.applySubstitutions(personalization);\n    }\n\n    //Push personalization to array\n    this.personalizations.push(personalization);\n  }\n\n  /**\n   * Convenience method for quickly creating personalizations\n   */\n  addTo(to, cc, bcc) {\n    if (typeof to === 'undefined' && typeof cc === 'undefined' && typeof bcc === 'undefined') {\n      throw new Error('Provide at least one of to, cc or bcc');\n    }\n    this.addPersonalization(new Personalization({\n      to,\n      cc,\n      bcc\n    }));\n  }\n\n  /**\n   * Set substitutions\n   */\n  setSubstitutions(substitutions) {\n    this._setProperty('substitutions', substitutions, 'object');\n  }\n\n  /**\n   * Set substitution wrappers\n   */\n  setSubstitutionWrappers(substitutionWrappers) {\n    let lengthCheck = (propertyName, value) => {\n      if (!Array.isArray(value) || value.length !== 2) {\n        throw new Error('Array expected with two elements for `' + propertyName + '`');\n      }\n    };\n    if (this._checkProperty('substitutionWrappers', substitutionWrappers, [this._checkUndefined, lengthCheck])) {\n      this.substitutionWrappers = substitutionWrappers;\n    }\n  }\n\n  /**\n   * Helper which applies globally set substitutions to personalizations\n   */\n  applySubstitutions(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.reverseMergeSubstitutions(this.substitutions);\n      personalization.setSubstitutionWrappers(this.substitutionWrappers);\n    }\n  }\n\n  /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */\n  applyDynamicTemplateData(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n    }\n  }\n\n  /**\n   * Set dynamicTemplateData\n   */\n  setDynamicTemplateData(dynamicTemplateData) {\n    if (typeof dynamicTemplateData === 'undefined') {\n      return;\n    }\n    if (typeof dynamicTemplateData !== 'object') {\n      throw new Error('Object expected for `dynamicTemplateData`');\n    }\n\n    // Check dynamic template for non-escaped characters and warn if found\n    if (!this.hideWarnings) {\n      Object.values(dynamicTemplateData).forEach(value => {\n        if (/['\"&]/.test(value)) {\n          console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n        }\n      });\n    }\n    this.dynamicTemplateData = dynamicTemplateData;\n  }\n\n  /**\n   * Set content\n   */\n  setContent(content) {\n    if (this._doArrayCheck('content', content)) {\n      if (!content.every(contentField => typeof contentField === 'object')) {\n        throw new Error('Expected each entry in `content` to be an object');\n      }\n      if (!content.every(contentField => typeof contentField.type === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `type` string');\n      }\n      if (!content.every(contentField => typeof contentField.value === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `value` string');\n      }\n      this.content = content;\n    }\n  }\n\n  /**\n   * Add content\n   */\n  addContent(content) {\n    if (this._checkProperty('content', content, [this._createTypeCheck('object')])) {\n      this.content.push(content);\n    }\n  }\n\n  /**\n   * Add text content\n   */\n  addTextContent(text) {\n    if (this._checkProperty('text', text, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: text,\n        type: 'text/plain'\n      });\n    }\n  }\n\n  /**\n   * Add HTML content\n   */\n  addHtmlContent(html) {\n    if (this._checkProperty('html', html, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: html,\n        type: 'text/html'\n      });\n    }\n  }\n\n  /**\n   * Set attachments\n   */\n  setAttachments(attachments) {\n    if (this._doArrayCheck('attachments', attachments)) {\n      if (!attachments.every(attachment => typeof attachment.content === 'string')) {\n        throw new Error('Expected each attachment to contain a `content` string');\n      }\n      if (!attachments.every(attachment => typeof attachment.filename === 'string')) {\n        throw new Error('Expected each attachment to contain a `filename` string');\n      }\n      if (!attachments.every(attachment => !attachment.type || typeof attachment.type === 'string')) {\n        throw new Error('Expected the attachment\\'s `type` field to be a string');\n      }\n      if (!attachments.every(attachment => !attachment.disposition || typeof attachment.disposition === 'string')) {\n        throw new Error('Expected the attachment\\'s `disposition` field to be a string');\n      }\n      this.attachments = attachments;\n    }\n  }\n\n  /**\n   * Add attachment\n   */\n  addAttachment(attachment) {\n    if (this._checkProperty('attachment', attachment, [this._checkUndefined, this._createTypeCheck('object')])) {\n      this.attachments.push(attachment);\n    }\n  }\n\n  /**\n   * Set categories\n   */\n  setCategories(categories) {\n    let allElementsAreStrings = (propertyName, value) => {\n      if (!Array.isArray(value) || !value.every(item => typeof item === 'string')) {\n        throw new Error('Array of strings expected for `' + propertyName + '`');\n      }\n    };\n    if (typeof categories === 'string') {\n      categories = [categories];\n    }\n    if (this._checkProperty('categories', categories, [this._checkUndefined, allElementsAreStrings])) {\n      this.categories = categories;\n    }\n  }\n\n  /**\n   * Add category\n   */\n  addCategory(category) {\n    if (this._checkProperty('category', category, [this._createTypeCheck('string')])) {\n      this.categories.push(category);\n    }\n  }\n\n  /**\n   * Set headers\n   */\n  setHeaders(headers) {\n    this._setProperty('headers', headers, 'object');\n  }\n\n  /**\n   * Add a header\n   */\n  addHeader(key, value) {\n    if (this._checkProperty('key', key, [this._createTypeCheck('string')]) && this._checkProperty('value', value, [this._createTypeCheck('string')])) {\n      this.headers[key] = value;\n    }\n  }\n\n  /**\n   * Set sections\n   */\n  setSections(sections) {\n    this._setProperty('sections', sections, 'object');\n  }\n\n  /**\n   * Set custom args\n   */\n  setCustomArgs(customArgs) {\n    this._setProperty('customArgs', customArgs, 'object');\n  }\n\n  /**\n   * Set tracking settings\n   */\n  setTrackingSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    validateTrackingSettings(settings);\n    this.trackingSettings = settings;\n  }\n\n  /**\n   * Set mail settings\n   */\n  setMailSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    validateMailSettings(settings);\n    this.mailSettings = settings;\n  }\n\n  /**\n   * Set hide warnings\n   */\n  setHideWarnings(hide) {\n    if (typeof hide === 'undefined') {\n      return;\n    }\n    if (typeof hide !== 'boolean') {\n      throw new Error('Boolean expected for `hideWarnings`');\n    }\n    this.hideWarnings = hide;\n  }\n\n  /**\n   * To JSON\n   */\n  toJSON() {\n    //Extract properties from self\n    const {\n      from,\n      replyTo,\n      sendAt,\n      subject,\n      content,\n      templateId,\n      personalizations,\n      attachments,\n      ipPoolName,\n      batchId,\n      asm,\n      sections,\n      headers,\n      categories,\n      customArgs,\n      mailSettings,\n      trackingSettings,\n      replyToList\n    } = this;\n\n    //Initialize with mandatory values\n    const json = {\n      from,\n      subject,\n      personalizations: arrayToJSON(personalizations)\n    };\n\n    //Array properties\n    if (Array.isArray(attachments) && attachments.length > 0) {\n      json.attachments = arrayToJSON(attachments);\n    }\n    if (Array.isArray(categories) && categories.length > 0) {\n      json.categories = categories.filter(cat => cat !== '');\n    }\n    if (Array.isArray(content) && content.length > 0) {\n      json.content = arrayToJSON(content);\n    }\n\n    //Object properties\n    if (Object.keys(headers).length > 0) {\n      json.headers = headers;\n    }\n    if (Object.keys(mailSettings).length > 0) {\n      json.mailSettings = mailSettings;\n    }\n    if (Object.keys(trackingSettings).length > 0) {\n      json.trackingSettings = trackingSettings;\n    }\n    if (Object.keys(customArgs).length > 0) {\n      json.customArgs = customArgs;\n    }\n    if (Object.keys(sections).length > 0) {\n      json.sections = sections;\n    }\n    if (Object.keys(asm).length > 0) {\n      json.asm = asm;\n    }\n\n    //Simple properties\n    if (typeof replyTo !== 'undefined') {\n      json.replyTo = replyTo;\n    }\n    if (typeof sendAt !== 'undefined') {\n      json.sendAt = sendAt;\n    }\n    if (typeof batchId !== 'undefined') {\n      json.batchId = batchId;\n    }\n    if (typeof templateId !== 'undefined') {\n      json.templateId = templateId;\n    }\n    if (typeof ipPoolName !== 'undefined') {\n      json.ipPoolName = ipPoolName;\n    }\n    if (typeof replyToList !== 'undefined') {\n      json.replyToList = replyToList;\n    }\n\n    //Return as snake cased object\n    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n  }\n\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create a Mail instance from given data\n   */\n  static create(data) {\n    //Array?\n    if (Array.isArray(data)) {\n      return data.filter(item => !!item).map(item => this.create(item));\n    }\n\n    //Already instance of Mail class?\n    if (data instanceof Mail) {\n      return data;\n    }\n\n    //Create instance\n    return new Mail(data);\n  }\n\n  /**************************************************************************\n   * helpers for property-setting checks\n   ***/\n\n  /**\n   * Perform a set of checks on the new property value. Returns true if all\n   * checks complete successfully without throwing errors or returning true.\n   */\n  _checkProperty(propertyName, value, checks) {\n    return !checks.some(e => e(propertyName, value));\n  }\n\n  /**\n   * Set a property with normal undefined and type-checks\n   */\n  _setProperty(propertyName, value, propertyType) {\n    let propertyChecksPassed = this._checkProperty(propertyName, value, [this._checkUndefined, this._createTypeCheck(propertyType)]);\n    if (propertyChecksPassed) {\n      this[propertyName] = value;\n    }\n    return propertyChecksPassed;\n  }\n\n  /**\n   * Fail if the value is undefined.\n   */\n  _checkUndefined(propertyName, value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Create and return a function that checks for a given type\n   */\n  _createTypeCheck(propertyType) {\n    return (propertyName, value) => {\n      if (typeof value !== propertyType) {\n        throw new Error(propertyType + ' expected for `' + propertyName + '`');\n      }\n    };\n  }\n\n  /**\n   * Create a check out of a callback. If the callback\n   * returns false, the check will throw an error.\n   */\n  _createCheckThatThrows(check, errorString) {\n    return (propertyName, value) => {\n      if (!check(value)) {\n        throw new Error(errorString);\n      }\n    };\n  }\n\n  /**\n   * Set an array property after checking that the new value is an\n   * array.\n   */\n  _setArrayProperty(propertyName, value) {\n    if (this._doArrayCheck(propertyName, value)) {\n      this[propertyName] = value;\n    }\n  }\n\n  /**\n   * Check that a value isn't undefined and is an array.\n   */\n  _doArrayCheck(propertyName, value) {\n    return this._checkProperty(propertyName, value, [this._checkUndefined, this._createCheckThatThrows(Array.isArray, 'Array expected for`' + propertyName + '`')]);\n  }\n\n  /**\n   * Set the replyToList from email body\n   */\n  setReplyToList(replyToList) {\n    if (this._doArrayCheck('replyToList', replyToList) && replyToList.length) {\n      if (!replyToList.every(replyTo => replyTo && typeof replyTo.email === 'string')) {\n        throw new Error('Expected each replyTo to contain an `email` string');\n      }\n      this.replyToList = replyToList;\n    }\n  }\n}\n\n//Export class\nmodule.exports = Mail;","map":{"version":3,"names":["EmailAddress","require","Personalization","toCamelCase","toSnakeCase","deepClone","arrayToJSON","DYNAMIC_TEMPLATE_CHAR_WARNING","validateMailSettings","validateTrackingSettings","Mail","constructor","data","isDynamic","hideWarnings","personalizations","attachments","content","categories","headers","sections","customArgs","trackingSettings","mailSettings","asm","substitutions","substitutionWrappers","dynamicTemplateData","fromData","Error","to","from","replyTo","cc","bcc","sendAt","subject","text","html","templateId","ipPoolName","batchId","category","isMultiple","replyToList","setFrom","setReplyTo","setSubject","setSendAt","setTemplateId","setBatchId","setIpPoolName","setAttachments","setContent","setSections","setHeaders","setCategories","setCustomArgs","setAsm","setMailSettings","setTrackingSettings","setHideWarnings","setReplyToList","setDynamicTemplateData","setSubstitutions","setSubstitutionWrappers","addTextContent","addHtmlContent","setPersonalizations","Array","isArray","forEach","addTo","_checkProperty","_checkUndefined","email","create","_setProperty","_createCheckThatThrows","Number","isInteger","indexOf","_createTypeCheck","groupId","groupsToDisplay","every","group","_doArrayCheck","personalization","addPersonalization","applyDynamicTemplateData","applySubstitutions","push","lengthCheck","propertyName","value","length","reverseMergeSubstitutions","deepMergeDynamicTemplateData","Object","values","test","console","warn","contentField","type","addContent","attachment","filename","disposition","addAttachment","allElementsAreStrings","item","addCategory","addHeader","key","settings","hide","toJSON","json","filter","cat","keys","map","checks","some","e","propertyType","propertyChecksPassed","check","errorString","_setArrayProperty","module","exports"],"sources":["E:/Coding/Portfolio/client/node_modules/@sendgrid/helpers/classes/mail.js"],"sourcesContent":["'use strict';\n\n/**\n * Dependencies\n */\nconst EmailAddress = require('./email-address');\nconst Personalization = require('./personalization');\nconst toCamelCase = require('../helpers/to-camel-case');\nconst toSnakeCase = require('../helpers/to-snake-case');\nconst deepClone = require('../helpers/deep-clone');\nconst arrayToJSON = require('../helpers/array-to-json');\nconst { DYNAMIC_TEMPLATE_CHAR_WARNING } = require('../constants');\nconst {validateMailSettings, validateTrackingSettings} = require('../helpers/validate-settings');\n\n/**\n * Mail class\n */\nclass Mail {\n\n  /**\n   * Constructor\n   */\n  constructor(data) {\n\n    //Initialize array and object properties\n    this.isDynamic = false;\n    this.hideWarnings = false;\n    this.personalizations = [];\n    this.attachments = [];\n    this.content = [];\n    this.categories = [];\n    this.headers = {};\n    this.sections = {};\n    this.customArgs = {};\n    this.trackingSettings = {};\n    this.mailSettings = {};\n    this.asm = {};\n\n    //Helper properties\n    this.substitutions = null;\n    this.substitutionWrappers = null;\n    this.dynamicTemplateData = null;\n\n    //Process data if given\n    if (data) {\n      this.fromData(data);\n    }\n  }\n\n  /**\n   * Build from data\n   */\n  fromData(data) {\n\n    //Expecting object\n    if (typeof data !== 'object') {\n      throw new Error('Expecting object for Mail data');\n    }\n\n    //Convert to camel case to make it workable, making a copy to prevent\n    //changes to the original objects\n    data = deepClone(data);\n    data = toCamelCase(data, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n\n    //Extract properties from data\n    const {\n      to, from, replyTo, cc, bcc, sendAt, subject, text, html, content,\n      templateId, personalizations, attachments, ipPoolName, batchId,\n      sections, headers, categories, category, customArgs, asm, mailSettings,\n      trackingSettings, substitutions, substitutionWrappers, dynamicTemplateData, isMultiple,\n      hideWarnings, replyToList,\n    } = data;\n\n    //Set data\n    this.setFrom(from);\n    this.setReplyTo(replyTo);\n    this.setSubject(subject);\n    this.setSendAt(sendAt);\n    this.setTemplateId(templateId);\n    this.setBatchId(batchId);\n    this.setIpPoolName(ipPoolName);\n    this.setAttachments(attachments);\n    this.setContent(content);\n    this.setSections(sections);\n    this.setHeaders(headers);\n    this.setCategories(category);\n    this.setCategories(categories);\n    this.setCustomArgs(customArgs);\n    this.setAsm(asm);\n    this.setMailSettings(mailSettings);\n    this.setTrackingSettings(trackingSettings);\n    this.setHideWarnings(hideWarnings);\n    this.setReplyToList(replyToList);\n\n    if (this.isDynamic) {\n      this.setDynamicTemplateData(dynamicTemplateData);\n    } else {\n      this.setSubstitutions(substitutions);\n      this.setSubstitutionWrappers(substitutionWrappers);\n    }\n\n    //Add contents from text/html properties\n    this.addTextContent(text);\n    this.addHtmlContent(html);\n\n    //Using \"to\" property for personalizations\n    if (personalizations) {\n      this.setPersonalizations(personalizations);\n    } else if (isMultiple && Array.isArray(to)) {\n      //Multiple individual emails\n      to.forEach(to => this.addTo(to, cc, bcc));\n    } else {\n      //Single email (possibly with multiple recipients in the to field)\n      this.addTo(to, cc, bcc);\n    }\n  }\n\n  /**\n   * Set from email\n   */\n  setFrom(from) {\n    if (this._checkProperty('from', from, [this._checkUndefined])) {\n      if (typeof from !== 'string' && typeof from.email !== 'string') {\n        throw new Error('String or address object expected for `from`');\n      }\n      this.from = EmailAddress.create(from);\n    }\n  }\n\n  /**\n   * Set reply to\n   */\n  setReplyTo(replyTo) {\n    if (this._checkProperty('replyTo', replyTo, [this._checkUndefined])) {\n      if (typeof replyTo !== 'string' && typeof replyTo.email !== 'string') {\n        throw new Error('String or address object expected for `replyTo`');\n      }\n      this.replyTo = EmailAddress.create(replyTo);\n    }\n  }\n\n  /**\n   * Set subject\n   */\n  setSubject(subject) {\n    this._setProperty('subject', subject, 'string');\n  }\n\n  /**\n   * Set send at\n   */\n  setSendAt(sendAt) {\n    if (this._checkProperty('sendAt', sendAt, [this._checkUndefined, this._createCheckThatThrows(Number.isInteger, 'Integer expected for `sendAt`')])) {\n      this.sendAt = sendAt;\n    }\n  }\n\n  /**\n   * Set template ID, also checks if the template is dynamic or legacy\n   */\n  setTemplateId(templateId) {\n    if (this._setProperty('templateId', templateId, 'string')) {\n      if (templateId.indexOf('d-') === 0) {\n        this.isDynamic = true;\n      }\n    }\n  }\n\n  /**\n   * Set batch ID\n   */\n  setBatchId(batchId) {\n    this._setProperty('batchId', batchId, 'string');\n  }\n\n  /**\n   * Set IP pool name\n   */\n  setIpPoolName(ipPoolName) {\n    this._setProperty('ipPoolName', ipPoolName, 'string');\n  }\n\n  /**\n   * Set ASM\n   */\n  setAsm(asm) {\n    if (this._checkProperty('asm', asm, [this._checkUndefined, this._createTypeCheck('object')])) {\n      if (typeof asm.groupId !== 'number') {\n        throw new Error('Expected `asm` to include an integer in its `groupId` field');\n      }\n      if (asm.groupsToDisplay &&\n        (!Array.isArray(asm.groupsToDisplay) || !asm.groupsToDisplay.every(group => typeof group === 'number'))) {\n        throw new Error('Array of integers expected for `asm.groupsToDisplay`');\n      }\n      this.asm = asm;\n    }\n  }\n\n  /**\n   * Set personalizations\n   */\n  setPersonalizations(personalizations) {\n    if (!this._doArrayCheck('personalizations', personalizations)) {\n      return;\n    }\n\n    if (!personalizations.every(personalization => typeof personalization === 'object')) {\n      throw new Error('Array of objects expected for `personalizations`');\n    }\n\n    //Clear and use add helper to add one by one\n    this.personalizations = [];\n    personalizations\n      .forEach(personalization => this.addPersonalization(personalization));\n  }\n\n  /**\n   * Add personalization\n   */\n  addPersonalization(personalization) {\n    //We should either send substitutions or dynamicTemplateData\n    //depending on the templateId\n    if (this.isDynamic && personalization.substitutions) {\n      delete personalization.substitutions;\n    } else if (!this.isDynamic && personalization.dynamicTemplateData) {\n      delete personalization.dynamicTemplateData;\n    }\n\n    //Convert to class if needed\n    if (!(personalization instanceof Personalization)) {\n      personalization = new Personalization(personalization);\n    }\n\n    //If this is dynamic, set dynamicTemplateData, or set substitutions\n    if (this.isDynamic) {\n      this.applyDynamicTemplateData(personalization);\n    } else {\n      this.applySubstitutions(personalization);\n    }\n\n    //Push personalization to array\n    this.personalizations.push(personalization);\n  }\n\n  /**\n   * Convenience method for quickly creating personalizations\n   */\n  addTo(to, cc, bcc) {\n    if (\n      typeof to === 'undefined' &&\n      typeof cc === 'undefined' &&\n      typeof bcc === 'undefined'\n    ) {\n      throw new Error('Provide at least one of to, cc or bcc');\n    }\n    this.addPersonalization(new Personalization({to, cc, bcc}));\n  }\n\n  /**\n   * Set substitutions\n   */\n  setSubstitutions(substitutions) {\n    this._setProperty('substitutions', substitutions, 'object');\n  }\n\n  /**\n   * Set substitution wrappers\n   */\n  setSubstitutionWrappers(substitutionWrappers) {\n    let lengthCheck = (propertyName, value) => {\n      if (!Array.isArray(value) || value.length !== 2) {\n        throw new Error('Array expected with two elements for `' + propertyName + '`');\n      }\n    };\n\n    if (this._checkProperty('substitutionWrappers', substitutionWrappers, [this._checkUndefined, lengthCheck])) {\n      this.substitutionWrappers = substitutionWrappers;\n    }\n  }\n\n  /**\n   * Helper which applies globally set substitutions to personalizations\n   */\n  applySubstitutions(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.reverseMergeSubstitutions(this.substitutions);\n      personalization.setSubstitutionWrappers(this.substitutionWrappers);\n    }\n  }\n\n  /**\n   * Helper which applies globally set dynamic_template_data to personalizations\n   */\n  applyDynamicTemplateData(personalization) {\n    if (personalization instanceof Personalization) {\n      personalization.deepMergeDynamicTemplateData(this.dynamicTemplateData);\n    }\n  }\n\n  /**\n   * Set dynamicTemplateData\n   */\n  setDynamicTemplateData(dynamicTemplateData) {\n    if (typeof dynamicTemplateData === 'undefined') {\n      return;\n    }\n    if (typeof dynamicTemplateData !== 'object') {\n      throw new Error('Object expected for `dynamicTemplateData`');\n    }\n\n    // Check dynamic template for non-escaped characters and warn if found\n    if (!this.hideWarnings) {\n      Object.values(dynamicTemplateData).forEach(value => {\n        if (/['\"&]/.test(value)) {\n          console.warn(DYNAMIC_TEMPLATE_CHAR_WARNING);\n        }\n      });\n    }\n\n    this.dynamicTemplateData = dynamicTemplateData;\n  }\n\n  /**\n   * Set content\n   */\n  setContent(content) {\n    if (this._doArrayCheck('content', content)) {\n      if (!content.every(contentField => typeof contentField === 'object')) {\n        throw new Error('Expected each entry in `content` to be an object');\n      }\n      if (!content.every(contentField => typeof contentField.type === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `type` string');\n      }\n      if (!content.every(contentField => typeof contentField.value === 'string')) {\n        throw new Error('Expected each `content` entry to contain a `value` string');\n      }\n      this.content = content;\n    }\n  }\n\n  /**\n   * Add content\n   */\n  addContent(content) {\n    if (this._checkProperty('content', content, [this._createTypeCheck('object')])) {\n      this.content.push(content);\n    }\n  }\n\n  /**\n   * Add text content\n   */\n  addTextContent(text) {\n    if (this._checkProperty('text', text, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: text,\n        type: 'text/plain',\n      });\n    }\n  }\n\n  /**\n   * Add HTML content\n   */\n  addHtmlContent(html) {\n    if (this._checkProperty('html', html, [this._checkUndefined, this._createTypeCheck('string')])) {\n      this.addContent({\n        value: html,\n        type: 'text/html',\n      });\n    }\n  }\n\n  /**\n   * Set attachments\n   */\n  setAttachments(attachments) {\n    if (this._doArrayCheck('attachments', attachments)) {\n      if (!attachments.every(attachment => typeof attachment.content === 'string')) {\n        throw new Error('Expected each attachment to contain a `content` string');\n      }\n      if (!attachments.every(attachment => typeof attachment.filename === 'string')) {\n        throw new Error('Expected each attachment to contain a `filename` string');\n      }\n      if (!attachments.every(attachment => !attachment.type || typeof attachment.type === 'string')) {\n        throw new Error('Expected the attachment\\'s `type` field to be a string');\n      }\n      if (!attachments.every(attachment => !attachment.disposition || typeof attachment.disposition === 'string')) {\n        throw new Error('Expected the attachment\\'s `disposition` field to be a string');\n      }\n      this.attachments = attachments;\n    }\n  }\n\n  /**\n   * Add attachment\n   */\n  addAttachment(attachment) {\n    if (this._checkProperty('attachment', attachment, [this._checkUndefined, this._createTypeCheck('object')])) {\n      this.attachments.push(attachment);\n    }\n  }\n\n  /**\n   * Set categories\n   */\n  setCategories(categories) {\n    let allElementsAreStrings = (propertyName, value) => {\n      if (!Array.isArray(value) || !value.every(item => typeof item === 'string')) {\n        throw new Error('Array of strings expected for `' + propertyName + '`');\n      }\n    };\n\n    if (typeof categories === 'string') {\n      categories = [categories];\n    }\n\n    if (this._checkProperty('categories', categories, [this._checkUndefined, allElementsAreStrings])) {\n      this.categories = categories;\n    }\n  }\n\n  /**\n   * Add category\n   */\n  addCategory(category) {\n    if (this._checkProperty('category', category, [this._createTypeCheck('string')])) {\n      this.categories.push(category);\n    }\n  }\n\n  /**\n   * Set headers\n   */\n  setHeaders(headers) {\n    this._setProperty('headers', headers, 'object');\n  }\n\n  /**\n   * Add a header\n   */\n  addHeader(key, value) {\n    if (this._checkProperty('key', key, [this._createTypeCheck('string')])\n      && this._checkProperty('value', value, [this._createTypeCheck('string')])) {\n      this.headers[key] = value;\n    }\n  }\n\n  /**\n   * Set sections\n   */\n  setSections(sections) {\n    this._setProperty('sections', sections, 'object');\n  }\n\n  /**\n   * Set custom args\n   */\n  setCustomArgs(customArgs) {\n    this._setProperty('customArgs', customArgs, 'object');\n  }\n\n  /**\n   * Set tracking settings\n   */\n  setTrackingSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    validateTrackingSettings(settings);\n    this.trackingSettings = settings;\n  }\n\n  /**\n   * Set mail settings\n   */\n  setMailSettings(settings) {\n    if (typeof settings === 'undefined') {\n      return;\n    }\n    validateMailSettings(settings);\n    this.mailSettings = settings;\n  }\n\n  /**\n   * Set hide warnings\n   */\n  setHideWarnings(hide) {\n    if (typeof hide === 'undefined') {\n      return;\n    }\n    if (typeof hide !== 'boolean') {\n      throw new Error('Boolean expected for `hideWarnings`');\n    }\n    this.hideWarnings = hide;\n  }\n\n  /**\n   * To JSON\n   */\n  toJSON() {\n\n    //Extract properties from self\n    const {\n      from, replyTo, sendAt, subject, content, templateId,\n      personalizations, attachments, ipPoolName, batchId, asm,\n      sections, headers, categories, customArgs, mailSettings,\n      trackingSettings, replyToList,\n    } = this;\n\n    //Initialize with mandatory values\n    const json = {\n      from, subject,\n      personalizations: arrayToJSON(personalizations),\n    };\n\n    //Array properties\n    if (Array.isArray(attachments) && attachments.length > 0) {\n      json.attachments = arrayToJSON(attachments);\n    }\n    if (Array.isArray(categories) && categories.length > 0) {\n      json.categories = categories.filter(cat => cat !== '');\n    }\n    if (Array.isArray(content) && content.length > 0) {\n      json.content = arrayToJSON(content);\n    }\n\n    //Object properties\n    if (Object.keys(headers).length > 0) {\n      json.headers = headers;\n    }\n    if (Object.keys(mailSettings).length > 0) {\n      json.mailSettings = mailSettings;\n    }\n    if (Object.keys(trackingSettings).length > 0) {\n      json.trackingSettings = trackingSettings;\n    }\n    if (Object.keys(customArgs).length > 0) {\n      json.customArgs = customArgs;\n    }\n    if (Object.keys(sections).length > 0) {\n      json.sections = sections;\n    }\n    if (Object.keys(asm).length > 0) {\n      json.asm = asm;\n    }\n\n    //Simple properties\n    if (typeof replyTo !== 'undefined') {\n      json.replyTo = replyTo;\n    }\n    if (typeof sendAt !== 'undefined') {\n      json.sendAt = sendAt;\n    }\n    if (typeof batchId !== 'undefined') {\n      json.batchId = batchId;\n    }\n    if (typeof templateId !== 'undefined') {\n      json.templateId = templateId;\n    }\n    if (typeof ipPoolName !== 'undefined') {\n      json.ipPoolName = ipPoolName;\n    }\n    if(typeof replyToList !== 'undefined') {\n      json.replyToList = replyToList;\n    }\n\n    //Return as snake cased object\n    return toSnakeCase(json, ['substitutions', 'dynamicTemplateData', 'customArgs', 'headers', 'sections']);\n  }\n\n  /**************************************************************************\n   * Static helpers\n   ***/\n\n  /**\n   * Create a Mail instance from given data\n   */\n  static create(data) {\n\n    //Array?\n    if (Array.isArray(data)) {\n      return data\n        .filter(item => !!item)\n        .map(item => this.create(item));\n    }\n\n    //Already instance of Mail class?\n    if (data instanceof Mail) {\n      return data;\n    }\n\n    //Create instance\n    return new Mail(data);\n  }\n\n  /**************************************************************************\n   * helpers for property-setting checks\n   ***/\n\n  /**\n   * Perform a set of checks on the new property value. Returns true if all\n   * checks complete successfully without throwing errors or returning true.\n   */\n  _checkProperty(propertyName, value, checks) {\n    return !checks.some((e) => e(propertyName, value));\n  }\n\n  /**\n   * Set a property with normal undefined and type-checks\n   */\n  _setProperty(propertyName, value, propertyType) {\n    let propertyChecksPassed = this._checkProperty(\n      propertyName,\n      value,\n      [this._checkUndefined, this._createTypeCheck(propertyType)]);\n\n    if (propertyChecksPassed) {\n      this[propertyName] = value;\n    }\n\n    return propertyChecksPassed;\n  }\n\n  /**\n   * Fail if the value is undefined.\n   */\n  _checkUndefined(propertyName, value) {\n    return typeof value === 'undefined';\n  }\n\n  /**\n   * Create and return a function that checks for a given type\n   */\n  _createTypeCheck(propertyType) {\n    return (propertyName, value) => {\n      if (typeof value !== propertyType) {\n        throw new Error(propertyType + ' expected for `' + propertyName + '`');\n      }\n    };\n  }\n\n  /**\n   * Create a check out of a callback. If the callback\n   * returns false, the check will throw an error.\n   */\n  _createCheckThatThrows(check, errorString) {\n    return (propertyName, value) => {\n      if (!check(value)) {\n        throw new Error(errorString);\n      }\n    };\n  }\n\n  /**\n   * Set an array property after checking that the new value is an\n   * array.\n   */\n  _setArrayProperty(propertyName, value) {\n    if (this._doArrayCheck(propertyName, value)) {\n      this[propertyName] = value;\n    }\n  }\n\n  /**\n   * Check that a value isn't undefined and is an array.\n   */\n  _doArrayCheck(propertyName, value) {\n    return this._checkProperty(\n      propertyName,\n      value,\n      [this._checkUndefined, this._createCheckThatThrows(Array.isArray, 'Array expected for`' + propertyName + '`')]);\n  }\n\n  /**\n   * Set the replyToList from email body\n   */\n   setReplyToList(replyToList) {\n    if (this._doArrayCheck('replyToList', replyToList) && replyToList.length) {\n      if (!replyToList.every(replyTo => replyTo && typeof replyTo.email === 'string')) {\n        throw new Error('Expected each replyTo to contain an `email` string');\n      }\n      this.replyToList = replyToList;\n    }\n  }\n}\n\n//Export class\nmodule.exports = Mail;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}